// GENERATED by @edgedb/generate v0.3.4

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
import type * as _sys_db from "./sys_db";
import type * as _sys_obj from "./sys_obj";
import type * as _sys_user from "./sys_user";
import type * as _default from "./default";
export type $ObjRootλShape = $.typeutil.flatten<_std.$Object_6b06be9b27fe11ee83ff159af7e1bb81λShape & {
  "header": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<owner[is sys_core::Obj]": $.LinkDesc<$Obj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_core::CodeType]": $.LinkDesc<$CodeType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_core::Code]": $.LinkDesc<$Code, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_core::Ent]": $.LinkDesc<$Ent, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_db::Table]": $.LinkDesc<_sys_db.$Table, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_db::Column]": $.LinkDesc<_sys_db.$Column, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_obj::DataObjAction]": $.LinkDesc<_sys_obj.$DataObjAction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_obj::NodeObj]": $.LinkDesc<_sys_obj.$NodeObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_user::UserType]": $.LinkDesc<_sys_user.$UserType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_user::Widget]": $.LinkDesc<_sys_user.$Widget, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_core::App]": $.LinkDesc<$App, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_obj::DataObj]": $.LinkDesc<_sys_obj.$DataObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is sys_obj::Form]": $.LinkDesc<_sys_obj.$Form, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ObjRoot = $.ObjectType<"sys_core::ObjRoot", $ObjRootλShape, null, [
  ..._std.$Object_6b06be9b27fe11ee83ff159af7e1bb81['__exclusives__'],
]>;
const $ObjRoot = $.makeType<$ObjRoot>(_.spec, "315d6d62-6ebf-11ee-a34f-4d02b4cb2700", _.syntax.literal);

const ObjRoot: $.$expr_PathNode<$.TypeSet<$ObjRoot, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ObjRoot, $.Cardinality.Many), null);

export type $ObjλShape = $.typeutil.flatten<$ObjRootλShape & _default.$MgmtλShape & {
  "owner": $.LinkDesc<$ObjRoot, $.Cardinality.One, {}, false, false,  false, false>;
  "<resources[is sys_user::UserType]": $.LinkDesc<_sys_user.$UserType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<resources": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Obj = $.ObjectType<"sys_core::Obj", $ObjλShape, null, [
  ...$ObjRoot['__exclusives__'],
  ..._default.$Mgmt['__exclusives__'],
]>;
const $Obj = $.makeType<$Obj>(_.spec, "3161e81f-6ebf-11ee-9f57-550d2a0bb68f", _.syntax.literal);

const Obj: $.$expr_PathNode<$.TypeSet<$Obj, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Obj, $.Cardinality.Many), null);

export type $EntλShape = $.typeutil.flatten<$ObjλShape & {
}>;
type $Ent = $.ObjectType<"sys_core::Ent", $EntλShape, null, [
  ...$Obj['__exclusives__'],
]>;
const $Ent = $.makeType<$Ent>(_.spec, "31713a78-6ebf-11ee-8704-47c13373d501", _.syntax.literal);

const Ent: $.$expr_PathNode<$.TypeSet<$Ent, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Ent, $.Cardinality.Many), null);

export type $AppλShape = $.typeutil.flatten<$EntλShape & {
}>;
type $App = $.ObjectType<"sys_core::App", $AppλShape, null, [
  ...$Ent['__exclusives__'],
]>;
const $App = $.makeType<$App>(_.spec, "31e17d93-6ebf-11ee-9d53-8fbc923c7791", _.syntax.literal);

const App: $.$expr_PathNode<$.TypeSet<$App, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($App, $.Cardinality.Many), null);

export type $CodeλShape = $.typeutil.flatten<$ObjλShape & {
  "codeType": $.LinkDesc<$CodeType, $.Cardinality.One, {}, false, false,  false, false>;
  "<codeAlignment[is sys_db::Column]": $.LinkDesc<_sys_db.$Column, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDataType[is sys_db::Column]": $.LinkDesc<_sys_db.$Column, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeIcon[is sys_obj::NodeObj]": $.LinkDesc<_sys_obj.$NodeObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeType[is sys_obj::NodeObj]": $.LinkDesc<_sys_obj.$NodeObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeCardinality[is sys_obj::DataObj]": $.LinkDesc<_sys_obj.$DataObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeComponent[is sys_obj::DataObj]": $.LinkDesc<_sys_obj.$DataObj, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeAccess[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbDataOp[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbDataSource[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbListDir[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeElement[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeInputType[is sys_obj::FormField]": $.LinkDesc<_sys_obj.$FormField, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeComponent[is sys_obj::Form]": $.LinkDesc<_sys_obj.$Form, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeCardinality[is sys_obj::Form]": $.LinkDesc<_sys_obj.$Form, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeAccess": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeAlignment": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeCardinality": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeComponent": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDataType": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbDataOp": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbDataSource": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeDbListDir": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeElement": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeIcon": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeInputType": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeType": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Code = $.ObjectType<"sys_core::Code", $CodeλShape, null, [
  ...$Obj['__exclusives__'],
]>;
const $Code = $.makeType<$Code>(_.spec, "316a5d16-6ebf-11ee-a4f1-ddd27e3d6eb2", _.syntax.literal);

const Code: $.$expr_PathNode<$.TypeSet<$Code, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Code, $.Cardinality.Many), null);

export type $CodeTypeλShape = $.typeutil.flatten<$ObjλShape & {
  "<codeType[is sys_core::Code]": $.LinkDesc<$Code, $.Cardinality.Many, {}, false, false,  false, false>;
  "<codeType": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $CodeType = $.ObjectType<"sys_core::CodeType", $CodeTypeλShape, null, [
  ...$Obj['__exclusives__'],
]>;
const $CodeType = $.makeType<$CodeType>(_.spec, "31653005-6ebf-11ee-acbe-7d40915b43a6", _.syntax.literal);

const CodeType: $.$expr_PathNode<$.TypeSet<$CodeType, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($CodeType, $.Cardinality.Many), null);

type getCodeTypeλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  $CodeType, $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, 'Zero'>
>;
function getCodeType<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  codeTypeName: P1,
): getCodeTypeλFuncExpr<P1>;
function getCodeType(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('sys_core::getCodeType', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "31653005-6ebf-11ee-acbe-7d40915b43a6", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "sys_core::getCodeType",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type getCodeλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  $Code, $.cardutil.overrideLowerBound<$.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>, 'Zero'>
>;
function getCode<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  codeTypeName: P1,
  codeName: P2,
): getCodeλFuncExpr<P1, P2>;
function getCode(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('sys_core::getCode', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}, {typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "316a5d16-6ebf-11ee-a4f1-ddd27e3d6eb2", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "sys_core::getCode",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type getEntλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  $Ent, $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, 'Zero'>
>;
function getEnt<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  entName: P1,
): getEntλFuncExpr<P1>;
function getEnt(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('sys_core::getEnt', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "31713a78-6ebf-11ee-8704-47c13373d501", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "sys_core::getEnt",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type getRootλFuncExpr = $.$expr_Function<
  $ObjRoot, $.cardutil.overrideLowerBound<$.Cardinality.One, 'Zero'>
>;
function getRoot(): getRootλFuncExpr;
function getRoot(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('sys_core::getRoot', args, _.spec, [
    {args: [], returnTypeId: "315d6d62-6ebf-11ee-a34f-4d02b4cb2700", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "sys_core::getRoot",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};



export { $ObjRoot, ObjRoot, $Obj, Obj, $Ent, Ent, $App, App, $Code, Code, $CodeType, CodeType };

type __defaultExports = {
  "ObjRoot": typeof ObjRoot;
  "Obj": typeof Obj;
  "Ent": typeof Ent;
  "App": typeof App;
  "Code": typeof Code;
  "CodeType": typeof CodeType;
  "getCodeType": typeof getCodeType;
  "getCode": typeof getCode;
  "getEnt": typeof getEnt;
  "getRoot": typeof getRoot
};
const __defaultExports: __defaultExports = {
  "ObjRoot": ObjRoot,
  "Obj": Obj,
  "Ent": Ent,
  "App": App,
  "Code": Code,
  "CodeType": CodeType,
  "getCodeType": getCodeType,
  "getCode": getCode,
  "getEnt": getEnt,
  "getRoot": getRoot
};
export default __defaultExports;
