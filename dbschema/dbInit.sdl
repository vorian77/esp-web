# RESET DATABASE
delete sys_app::SysAppNode;
delete sys_app::SysForm;
delete sys_app::SysAppProgram;
delete sys_core::SysCode;
delete sys_core::SysCodeType;
delete sys_core::SysEnt;
delete sys_user::User;

# POPULATE DATABASE

# system user
insert sys_user::User { 
  first_name := 'System',
  last_name := 'User',
  username := 'sys_user',
  password := '!8394812kalsdjfa*!@#$$*&' 
};

# entities
with 
my_creator := (select sys_user::getUser('sys_user'))
for x in {
  'app_cm',
  'sys_app', 
  'sys_user', 
  'Atlantic Impact',
  "Baltimore Mayor's Office Of Development",
  'KidSmart Software Company'
}
union (insert sys_core::SysEnt {
  name := x,
  created_by := my_creator,
  modified_by := my_creator
});

# code_types
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  ('sys_app', 'sys_app_node_object_type')
}
union (insert sys_core::SysCodeType {
  owner := (select sys_core::getEnt(x.0)),
  name := x.1,
  created_by := my_creator,
  modified_by := my_creator
});

# codes
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  ('sys_app', ('sys_app', 'sys_app_node_object_type'), 'form_list'),
  ('sys_app', ('sys_app', 'sys_app_node_object_type'), 'form_detail')
}
union (insert sys_core::SysCode {
  owner := (select sys_core::getEnt(x.0)),
  code_type := (select sys_core::getCodeType(x.1.0, x.1.1)),
  name := x.2,
  created_by := my_creator,
  modified_by := my_creator
});

# app - programs
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  ('sys_app', 'sys_admin', 'Administration', 0), 
  ('app_cm', 'app_case_manager', 'Case Manager', 10), 
}
union (insert sys_app::SysAppProgram {
  owner := (select sys_core::getEnt(x.0)),
  name := x.1,
  name_display := x.2,
  order := x.3,
  created_by := my_creator,
  modified_by := my_creator
});

# app - program - nodes
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  (('sys_app', 'sys_admin'), 'sys_app', 'sys_apps', 'Applications', (), 10),
  (('sys_app', 'sys_admin'), 'sys_user', 'sys_users', 'Users', (), 20),
  (('sys_app', 'sys_admin'), 'sys_app', 'sys_entities', 'Entities', (), 30),
  (('sys_app', 'sys_admin'), 'sys_app', 'sys_utilities', 'Utilities', (), 40),
}
union (insert sys_app::SysAppNode {
  program := (select sys_app::getAppProgram(x.0.0, x.0.1)),
  owner := (select sys_core::getEnt(x.1)),
  name := x.2,
  name_display := x.3,
  parent := (select sys_app::getAppProgram(x.0.0, x.0.1)),
  order := x.5,
  created_by := my_creator,
  modified_by := my_creator
});

# app - forms
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  ('sys_app', 'sys_app_code_types', 'Code Types', '', '', ''),
  ('sys_app', 'sys_app_codes', 'Codes', '', '', ''),
}
union (insert sys_app::SysForm {
  owner := (select sys_core::getEnt(x.0)),
  name := x.1,
  name_display := x.2,
  sub_header := x.3,
  description := x.4,
  submit_button_label := x.5,
  created_by := my_creator,
  modified_by := my_creator
});

# app - features
with 
my_creator := (select sys_user::getUser('sys_user')),
for x in {
  (('sys_app', 'sys_admin'), 'sys_app', 'sys_app_code_types', 'Code Types', ('sys_app', 'sys_admin', 'sys_apps'), 10, (('sys_app', 'sys_app_code_types'), ('sys_app', 'sys_app_code_types')))
}
union (insert sys_app::SysAppNode {
  program := (select sys_app::getAppProgram(x.0.0, x.0.1)),
  owner := (select sys_core::getEnt(x.1)),
  name := x.2,
  name_display := x.3,
  parent := (select sys_app::getAppNode(x.4.0, x.4.1, x.4.2)),
  order := x.5,

  objs := (select( 
    for y in { (('sys_app', 'sys_app_code_types'), ('sys_app', 'sys_app_code_types')) } 
    union ( select sys_app::getAppForm(y.0, y.1) )  
  )),
  

  #  <tuple<str, str>>x.6
  # objs := (select sys_app::getAppForm(x.6.0, x.6.1)),

  
  # objs := (select sys_app::getAppForm(x.6.0, x.6.1) {
  #   @obj_type := <sys_app::SysAppNodeObjType>x.7
  # }),
  created_by := my_creator,
  modified_by := my_creator
  } 
);

# # Create a new review and a new user in one step.
# insert Review {
#     body := 'Loved it!!!',
#     rating := 5,
#     # The movie record already exists, so select it.
#     movie := (
#         select Movie
#         filter
#             .title = 'Dune'
#             and
#             .year = 2020
#         # the limit is needed to satisfy the single
#         # link requirement validation
#         limit 1
#     ),

#     # This might be a new user or an existing user. Some
#     # other part of the app handles authentication, this
#     # endpoint is used as a generic way to post a review.
#     author := (
#         # Try to create a new User,
#         insert User {
#             name := "dune_fan_2020",
#             image := "default_avatar.jpg",
#         }

#         # but if a User with this name already exists,
#         unless conflict on .name
#         # just pick that existing User as the author.
#         else User
#     )
# }


# insert Person {
#   name := "Bob",
#   friends := (
#     select detached Person {
#       @strength := 3.14
#     }
#     filter .name = "Alice"
#   )
# }

# insert Person {
#   name := "Bob",
#   friends := (
#     insert Person {
#       name := "Jane",
#       @strength := 3.14
#     }
#   )
# }